#include <iostream>
#include <cstdlib>
#include <cstdio>
using namespace std;
#define MAX 50000

// 动规注意各个下标表示的是什么！
// dp数组不要忘了初始化为 0

int MyMax(int a, int b) {
	return a > b ? a : b;
}

int main() {
	int N, m;
	scanf("%d%d", &N, &m);
	int v[50], w[50];
	int dp[MAX] = { 0 };
	for (int i = 1; i <= m; ++i) {
		scanf("%d%d", &v[i], &w[i]);
	}

	// 状态转移方程： f[i][v] = max{f[i-1][v](第 i 种商品不选) , f[i-1][v-g[k].weight] + g[k].cost}
	// dp[i] 就是用掉了i的体积 可以达到的最大值
	// 遍历每一个物品 对这个物品来说：dp数组就是从最大的体积开始看看放不放这个物品
	for (int i = 1; i <= m; ++i) {
		for (int k = N; k >= v[i]; --k) {
			dp[k] = MyMax(dp[k], dp[k - v[i]] + w[i] * v[i]);    // 是看这个物品放不放 所以下标是i！
		}
	}

	cout << dp[N] << endl;


	return 0;
}

/*
今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1−5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。

请你帮助金明设计一个满足要求的购物单。

输入输出格式
输入格式：
第一行，为2个正整数，用一个空格隔开：N m（其中N(<30000)表示总钱数，m(<25)为希望购买物品的个数。）

从第2行到第m+1行，第j行给出了编号为j−1的物品的基本数据，每行有2个非负整数 v p（其中v表示该物品的价格	p表示该物品的重要度(1-5)

输出格式：
1 个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值(<100000000)。

*/