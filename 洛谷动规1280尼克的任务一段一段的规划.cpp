// 这题抄答案了www
#include<iostream>  
#include<algorithm>  
using namespace std;
long int n, k, sum[10001], num = 1, f[10001];
struct ren//结构体，一起排序 ，从大到小   
{
	long int ks, js;
};
ren z[10001];
int cmp(ren a, ren b)
{
	return a.ks>b.ks;
}
int main() {
	long int i, j;
	cin >> n >> k;
	for (i = 1; i <= k; i++)
	{
		cin >> z[i].ks >> z[i].js;
		sum[z[i].ks]++;
	}
	sort(z + 1, z + k + 1, cmp);
	for (i = n; i >= 1; i--)	// 倒着搜   
	{
		if (sum[i] == 0)		// 如果没有任务在这个时刻开始 就反正不可能在这个时刻选择一个任务 所以就直接是空闲了 就 = 下一时刻的 + 1
			f[i] = f[i + 1] + 1;
		else {					// 如果这个时刻有任务开始 就看看如果选择这个任务会不会时间更少
			// 这里的任务对应用了 排序 + sum数组简单记录 的方法(就是不用全部遍历去找 第i时刻 开始的任务有什么), 很不错
			for (j = 1; j <= sum[i]; j++) {
				if (f[i + z[num].js] > f[i])
					f[i] = f[i + z[num].js];
				num++;			// 当前已扫过的任务数   
			}
		}
	}
	cout << f[1] << endl;
}

/*
理解状态转移方程:
从前往后是不好定义结束的, 所以倒着搜.
第 i ~ n 时间段的空闲时间 = 
	if 当前时刻没有任务 = (i + 1) ~ n 时间段的空闲时间 + 1

	else if 当前时刻有任务 = 任务结束时间 ~ n 这个时间段的空闲时间

注意关键就是 当前 i 时刻是否是否选择以 i 时刻开始的任务来做
	
	*/

/*
题目描述
尼克每天上班之前都连接上英特网，接收他的上司发来的邮件，这些邮件包含了尼克主管的部门当天要完成的全部任务，每个任务由一个开始时刻与一个持续时间构成。

尼克的一个工作日为N分钟，从第一分钟开始到第N分钟结束。当尼克到达单位后他就开始干活。如果在同一时刻有多个任务需要完成，尼克可以任选其中的一个来做，而其余的则由他的同事完成，反之如果只有一个任务，则该任务必需由尼克去完成，假如某些任务开始时刻尼克正在工作，则这些任务也由尼克的同事完成。如果某任务于第P分钟开始，持续时间为T分钟，则该任务将在第P+T-1分钟结束。

写一个程序计算尼克应该如何选取任务，才能获得最大的空暇时间。

输入输出格式
输入格式：
输入数据第一行含两个用空格隔开的整数N和K(1≤N≤10000，1≤K≤10000)，N表示尼克的工作时间，单位为分钟，K表示任务总数。

接下来共有K行，每一行有两个用空格隔开的整数P和T，表示该任务从第P分钟开始，持续时间为T分钟，其中1≤P≤N，1≤P+T-1≤N。

输出格式：
输出文件仅一行，包含一个整数，表示尼克可能获得的最大空暇时间。

输入:
15 6
1 2
1 6
4 11
8 5
8 1
11 5

输出:
4
*/
